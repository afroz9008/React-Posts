{"version":3,"sources":["Graphql_Queries/Queries.jsx","Pages/GraphQlDemoComponent/GraphqlPosts.jsx","Pages/GraphQlDemoComponent/GraphQlPostsExample.jsx","Api.jsx"],"names":["PostsQuery","gql","Posts","useQuery","loading","error","data","useState","start","end","page","setPage","selectedPost","setSelectedPost","posts","filteredPosts","allPosts","setAllPosts","searchQuery","setSearchQuery","pagination","type","useEffect","console","log","className","size","style","fontSize","Modal","isOpen","backdrop","ModalHeader","toggle","ModalBody","cursor","boxShadow","id","title","body","Container","backgroundColor","Input","value","onChange","target","filtered_Posts","filter","post","toLowerCase","includes","trim","toString","user","name","prevState","placeholder","length","Math","ceil","slice","map","key","onClick","Button","color","outline","disabled","GraphQlPostsExample","client","getGraphqlPosts","GraphqlPosts","getPosts","Axios","get","ApolloClient","uri"],"mappings":"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","file":"static/js/7.1ee9d53d.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\r\n\r\nexport const PostsQuery = gql`{\r\n    posts{\r\n        data{\r\n            id\r\n            title\r\n            body\r\n            user{\r\n                name\r\n            }\r\n        }\r\n    }\r\n}`;","import React, { useState, useEffect } from \"react\";\r\nimport { Container, Button, Input, Modal, ModalHeader, ModalBody } from \"reactstrap\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport { useQuery } from \"react-apollo\";\r\nimport { PostsQuery } from \"../../Graphql_Queries/Queries\";\r\n\r\nconst Posts = () => {\r\n    const { loading, error, data } = useQuery(PostsQuery);\r\n    const [page, setPage] = useState({ start: 0, end: 5 })\r\n    const [selectedPost, setSelectedPost] = useState(null);\r\n    const [allPosts, setAllPosts] = useState({ posts: [], filteredPosts: [] });\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n\r\n    const pagination = (type) => {\r\n        type === \"next\" ?\r\n            setPage({ start: page.end, end: page.end + 5 }) :\r\n            setPage({ start: page.start - 5, end: page.start });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (data && !loading) {\r\n            console.log(data, loading);\r\n            const { posts } = data;\r\n            setAllPosts({\r\n                posts: posts.data,\r\n                filteredPosts: posts.data\r\n            });\r\n        }\r\n    }, [data, loading])\r\n\r\n    const searchHandler = ({ target: { value } }) => {\r\n        setPage({ start: 0, end: 5 });\r\n        setSearchQuery(value);\r\n        const filtered_Posts = allPosts.posts.filter(post => (\r\n            post.title.toLowerCase().includes(value.trim().toLowerCase()) ||\r\n            post.id.toString().includes(value.trim().toString()) ||\r\n            post.user.name.toLowerCase().includes(value.trim().toLowerCase())\r\n        ));\r\n        setAllPosts(prevState => ({\r\n            ...prevState,\r\n            filteredPosts: filtered_Posts\r\n        }));\r\n    };\r\n\r\n    if (loading) return <div className=\"mt-5 text-center\"><ClipLoader size=\"100px\" /></div>;\r\n    if (error) return (\r\n        <div className=\"mt-5 d-flex flex-wrap justify-content-center\">\r\n            <i style={{ fontSize: \"5rem\" }} className=\"w-100 fa fa-exclamation-triangle text-center text-danger\"></i>\r\n            <h3 className=\"text-center text-danger\">Something went wrong.<br />Please try again later.</h3>\r\n        </div>\r\n    );\r\n    return (\r\n        <>\r\n            {\r\n                selectedPost ?\r\n                    <Modal isOpen={true} backdrop=\"static\">\r\n                        <ModalHeader toggle={() => setSelectedPost(null)}>Post</ModalHeader>\r\n                        <ModalBody>\r\n                            <div\r\n                                className=\"p-4 m-2\"\r\n                                style={{ cursor: \"pointer\", boxShadow: \"0 0 10px 1px #ccc\" }}>\r\n                                <h4>{selectedPost.id} : {selectedPost.title}</h4>\r\n                                <p>{selectedPost.body}</p>\r\n                            </div>\r\n                        </ModalBody>\r\n                    </Modal> : null\r\n\r\n            }\r\n            <Container className=\"mb-4\">\r\n                <div className=\"posts_container\">\r\n                    <h1 className=\"text-center\">Posts</h1>\r\n                    <div style={{ backgroundColor: \"white\" }}>\r\n\r\n                        <div className=\"d-flex justify-content-center\">\r\n                            <Input\r\n                                value={searchQuery}\r\n                                onChange={searchHandler}\r\n                                placeholder=\"Search\"\r\n                                type=\"text\" />\r\n                        </div>\r\n                        <div className=\"d-flex justify-content-end py-1\">\r\n                            <span className=\"text-center px-2 py-0 text-muted\">\r\n                                Total Posts <br />{allPosts.filteredPosts.length}\r\n                            </span>\r\n                            <span className=\"text-center px-2 py-0 text-muted\">\r\n                                Total Pages <br />{Math.ceil(allPosts.filteredPosts.length / 5)}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex flex-wrap justify-content-center\">\r\n                    {\r\n                        allPosts.filteredPosts.length ?\r\n                            allPosts.filteredPosts.slice(page.start, page.end).map(post => {\r\n                                return (\r\n                                    <div\r\n                                        key={post.id}\r\n                                        onClick={() => setSelectedPost(post)}\r\n                                        className=\"post2 d-inline-block flex-grow-1 m-2 position-relative\">\r\n                                        <h4 className=\"heading\">{post.id} : {post.title}</h4>\r\n                                        <p>{post.body}</p>\r\n                                        <p className=\"text-muted position-absolute px-3 username-desc\">- {post.user.name}</p>\r\n                                    </div>\r\n                                )\r\n                            }) : <h3 className=\"mx-auto text-danger\">Posts Not Found</h3>\r\n                    }\r\n                </div>\r\n                <div className=\"d-flex justify-content-around mt-2\" >\r\n                    <Button\r\n                        size=\"sm\"\r\n                        color=\"primary\"\r\n                        outline\r\n                        onClick={() => pagination(\"prev\")}\r\n                        disabled={page.start === 0}>Previous</Button>\r\n                    <Button\r\n                        size=\"sm\"\r\n                        color=\"primary\"\r\n                        outline\r\n                        onClick={() => pagination(\"next\")}\r\n                        disabled={allPosts.filteredPosts.length <= page.end}>Next</Button>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\nexport default Posts;","import React from \"react\";\r\nimport GraphqlPosts from \"./GraphqlPosts\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport { getGraphqlPosts } from \"../../Api\";\r\n\r\nexport default function GraphQlPostsExample() {\r\n    return (\r\n        <ApolloProvider client={getGraphqlPosts}>\r\n            <GraphqlPosts />\r\n        </ApolloProvider>\r\n    )\r\n};","import Axios from \"axios\";\r\nimport ApolloClient from \"apollo-boost\";\r\n\r\nexport default function getPosts() {\r\n    return Axios.get(\"https://jsonplaceholder.typicode.com/photos\");\r\n};\r\n\r\nexport const getGraphqlPosts = new ApolloClient({\r\n    uri: \"https://graphqlzero.almansi.me/api\"\r\n});\r\n"],"sourceRoot":""}