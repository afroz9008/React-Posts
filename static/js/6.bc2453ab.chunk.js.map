{"version":3,"sources":["Pages/Fake Posts/Posts.jsx","Api.jsx"],"names":["Image","React","lazy","Posts","useState","posts","filteredPosts","allPosts","setAllPosts","start","end","page","setPage","selectedPost","setSelectedPost","searchQuery","setSearchQuery","loading","setLoading","error","setError","pagination","type","useEffect","document","title","getPosts","then","res","data","catch","er","message","console","log","className","size","color","isOpen","backdrop","toggle","style","cursor","boxShadow","id","url","value","onChange","target","filtered_Posts","filter","post","toLowerCase","includes","trim","toString","prevState","placeholder","length","slice","map","key","onClick","fallback","outline","disabled","Axios","get","getGraphqlPosts","ApolloClient","uri"],"mappings":"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","file":"static/js/6.bc2453ab.chunk.js","sourcesContent":["import React, { Suspense, useState, useEffect } from \"react\";\r\nimport { Button, Container, Modal, ModalHeader, ModalBody, Input } from \"reactstrap\";\r\nimport { ClipLoader } from \"react-spinners\";\r\nimport getPosts from \"../../Api\";\r\nconst Image = React.lazy(() => import(\"../../Component/Image\"));\r\n\r\n\r\nconst Posts = () => {\r\n    const [allPosts, setAllPosts] = useState({ posts: [], filteredPosts: [] });\r\n    const [page, setPage] = useState({ start: 0, end: 6 })\r\n    const [selectedPost, setSelectedPost] = useState(null);\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const pagination = (type) => {\r\n        type === \"next\" ?\r\n            setPage({ start: page.end, end: page.end + 6 }) :\r\n            setPage({ start: page.start - 6, end: page.start });\r\n    };\r\n\r\n    const searchHandler = ({ target: { value } }) => {\r\n        setPage({ start: 0, end: 6 });\r\n        setSearchQuery(value);\r\n        const filtered_Posts = allPosts.posts.filter(post => (\r\n            post.title.toLowerCase().includes(value.trim().toLowerCase()) ||\r\n            post.id.toString().includes(value.trim().toString())\r\n        ));\r\n        setAllPosts(prevState => ({\r\n            ...prevState,\r\n            filteredPosts: filtered_Posts\r\n        }));\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.title = \"Posts\";\r\n        getPosts().then(res => {\r\n            setAllPosts({\r\n                posts: res.data,\r\n                filteredPosts: res.data\r\n            });\r\n            setLoading(false);\r\n        }).catch(er => {\r\n            setLoading(false);\r\n            setError(er.message);\r\n        });\r\n        console.log(\"Posts component is Mount\")\r\n    }, []);\r\n\r\n    if (error !== \"\") return <h3 className=\"text-center mt-5\">{error}</h3>;\r\n    else if (loading) return <div className=\"text-center mt-5\"><ClipLoader size=\"100px\" color=\"red\" /></div>;\r\n    return (\r\n        <>\r\n            {\r\n                selectedPost ?\r\n                    <Modal isOpen={true} backdrop=\"static\">\r\n                        <ModalHeader toggle={() => setSelectedPost(null)}>Post</ModalHeader>\r\n                        <ModalBody>\r\n                            <div\r\n                                className=\"p-4 m-2\"\r\n                                style={{ cursor: \"pointer\", boxShadow: \"0 0 10px 1px #ccc\" }}>\r\n                                <h4 className=\"heading\">{selectedPost.id} : {selectedPost.title}</h4>\r\n                                <div>\r\n                                    <Image url={selectedPost.url} id={selectedPost.id} />\r\n                                </div>\r\n                            </div>\r\n                        </ModalBody>\r\n                    </Modal> : null\r\n            }\r\n            <Container className=\"my-4\">\r\n                <h1 className=\"text-center\">Posts</h1>\r\n                <div className=\"d-flex align-items-center flex-wrap justify-content-center mb-3\">\r\n                    <Input\r\n                        className=\"w-75\"\r\n                        value={searchQuery}\r\n                        onChange={searchHandler}\r\n                        placeholder=\"Search\"\r\n                        type=\"text\" />\r\n                    <span className=\"text-center px-2 py-0 text-muted\">\r\n                        Total Posts <br className=\"d-none d-sm-block\" />\r\n                        {allPosts.filteredPosts.length}\r\n                    </span>\r\n\r\n                </div>\r\n                <div className=\"d-flex flex-wrap justify-content-center\">\r\n                    {\r\n                        allPosts.filteredPosts.length ?\r\n                            allPosts.filteredPosts.slice(page.start, page.end).map(post => {\r\n                                return (\r\n                                    <div\r\n                                        key={post.id}\r\n                                        className=\"post d-inline-block flex-grow-1 m-2\"\r\n                                        onClick={() => setSelectedPost(post)}>\r\n                                        <h4 className=\"heading\">{post.id} : {post.title}</h4>\r\n                                        <div className=\"d-flex justify-content-center align-items-center\">\r\n                                            <Suspense fallback={<ClipLoader color=\"green\" size=\"100px\" />}>\r\n                                                <Image url={post.url} id={post.id} />\r\n                                            </Suspense>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            }) : <h3 className=\"mx-auto text-danger\">Posts Not Found</h3>\r\n                    }\r\n                </div>\r\n                <div className=\"d-flex justify-content-around mt-2\" >\r\n                    <Button size=\"sm\" color=\"primary\" outline onClick={() => pagination(\"prev\")} disabled={page.start === 0}>Previous</Button>\r\n                    <Button size=\"sm\" color=\"primary\" outline onClick={() => pagination(\"next\")} disabled={allPosts.filteredPosts.length <= page.end}>Next</Button>\r\n                </div>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\nexport default Posts;","import Axios from \"axios\";\r\nimport ApolloClient from \"apollo-boost\";\r\n\r\nexport default function getPosts() {\r\n    return Axios.get(\"https://jsonplaceholder.typicode.com/photos\");\r\n};\r\n\r\nexport const getGraphqlPosts = new ApolloClient({\r\n    uri: \"https://graphqlzero.almansi.me/api\"\r\n});\r\n"],"sourceRoot":""}